/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */
«IMPORT 'http://www.eclipse.org/gmf/2008/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»

«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::editor::GenDiagram»
«EXTENSION aspects::xpt::editor::defaultImports»
«EXTENSION xpt::editor::Utils»

«AROUND getUniqueFileNameMethod FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	public static String getUniqueFileName(org.eclipse.core.runtime.IPath containerFullPath, String fileName, String extension) {
		if (containerFullPath == null) {
			containerFullPath = new org.eclipse.core.runtime.Path(""); //$NON-NLS-1$
		}
		if (fileName == null || fileName.trim().length() == 0) {
			fileName = "default"; //$NON-NLS-1$
		}

		extension = "." + extension;
		if (fileName.endsWith(extension)) {
			fileName = fileName.substring(0, fileName.length() - extension.length());
		}
		int i = 1;
		org.eclipse.core.runtime.IPath filePath = containerFullPath.append(fileName + extension);
		while (
		«IF editorGen.application = null-»
			org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().exists(filePath)
		«ELSE-»
			filePath.toFile().exists()
		«ENDIF-»
		) {
			i++;
			filePath = containerFullPath.append(fileName + i + extension);
		}
		return filePath.lastSegment();
	}
«ENDAROUND»

«AROUND attachModelMethod FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment('Store model element in the resource.
<!-- begin-user-doc -->
<!-- end-user-doc -->')»
	private static void attachModelToResource(«EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» model, org.eclipse.emf.ecore.resource.Resource resource) {
		resource.getContents().add(«IF hasDocumentRoot(self)»createDocumentRoot(model)«ELSE»«IF isExternalInterface(domainDiagramElement)»(org.eclipse.emf.ecore.EObject) «ENDIF»model«ENDIF»);
		«EXPAND loadDefaultImportsCall»
	}
«ENDAROUND»

«AROUND additions FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.core.resources.IFile getFile(org.eclipse.emf.common.util.URI uri) {
		if (uri.toString().startsWith("platform:/resource")) { «EXPAND xpt::Common::nonNLS»
			String path = uri.toString().substring("platform:/resource".length()); «EXPAND xpt::Common::nonNLS»
			org.eclipse.core.resources.IResource workspaceResource = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().findMember(new org.eclipse.core.runtime.Path(path));
			if (workspaceResource instanceof org.eclipse.core.resources.IFile) {
				return (org.eclipse.core.resources.IFile) workspaceResource;
			}
		}
		return null;
	}
	
	«EXPAND loadDefaultImports»
«ENDAROUND»

«AROUND createDiagramMethod FOR gmfgen::GenDiagram-»
«IF not needDefaultName(self)»
«targetDef.proceed()-»
«ELSE»
	«EXPAND xpt::Common::generatedMemberComment((if editorGen.application = null then 'This method should be called within a workspace modify operation since it creates resources.' else '' endif))»
	public static org.eclipse.emf.ecore.resource.Resource createDiagram(org.eclipse.emf.common.util.URI diagramURI,«IF standaloneDomainModel(self)» org.eclipse.emf.common.util.URI modelURI,«ENDIF» org.eclipse.core.runtime.IProgressMonitor progressMonitor) {
		org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory.INSTANCE.createEditingDomain();
		progressMonitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreateDiagramProgressTask(self)) FOR editorGen», 3);
		final org.eclipse.emf.ecore.resource.Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);
«IF standaloneDomainModel(self)-»
		final org.eclipse.emf.ecore.resource.Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);
«ELSEIF domainDiagramElement <> null and hasDocumentRoot(self) /*for standalone models, we assume its resourcefactory would be able to set extendedMetaData option*/-»
		((org.eclipse.emf.ecore.xmi.XMLResource) diagramResource).getDefaultSaveOptions().put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE);
		((org.eclipse.emf.ecore.xmi.XMLResource) diagramResource).getDefaultLoadOptions().put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_EXTENDED_META_DATA, Boolean.TRUE);
«ENDIF-»
		final String diagramName = diagramURI.lastSegment();
		«REM» #263482 'Give a diagram a default name'«ENDREM»«-»
		final String diagramNameWithoutExtension = diagramURI.trimFileExtension().lastSegment();
		«REM» END #263482 «ENDREM»«-»
		org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand command = new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(editingDomain, «EXPAND xpt::Externalizer::accessorCall(i18nKeyForCreateDiagramCommandLabel(self)) FOR editorGen», java.util.Collections.EMPTY_LIST) {
			protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
«IF domainDiagramElement <> null-»
		«REM» #263482 'Give a diagram a default name'«ENDREM»«-»
				«EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» model = createInitialModel(diagramNameWithoutExtension);
		«REM» END #263482 «ENDREM»«-»
				attachModelToResource(model, «IF standaloneDomainModel(self)»model«ELSE»diagram«ENDIF»Resource);
«ENDIF»
				org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createDiagram(
«IF domainDiagramElement <> null-»
				«EXPAND MetaModel::DowncastToEObject('model') FOR domainDiagramElement», 
«ENDIF-»
					«EXPAND xpt::editor::VisualIDRegistry::modelID», «EXPAND xpt::plugin::Activator::preferenceHintAccess FOR editorGen»);
				if (diagram != null) {
					diagramResource.getContents().add(diagram);
					diagram.setName(diagramName);
«IF domainDiagramElement <> null-»
					diagram.setElement(«EXPAND MetaModel::DowncastToEObject('model') FOR domainDiagramElement»);
«ENDIF-»
				}
				
				try {
					«IF standaloneDomainModel(self)»modelResource.save(«EXPAND xpt::Common::getSaveOptions»);«ENDIF»
					diagramResource.save(«EXPAND xpt::Common::getSaveOptions»);
				} catch (java.io.IOException e) {
					«/* TODO CommandResult.newErrorCommandResult(e) would be better? Or even throw ExecutionEx?*/»
					«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to store model and diagram resources", e); «EXPAND xpt::Common::nonNLS»
				}
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
			}
		};
		try {
			org.eclipse.core.commands.operations.OperationHistoryFactory.getOperationHistory().execute(command, new org.eclipse.core.runtime.SubProgressMonitor(progressMonitor, 1), null);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to create model and diagram", e); «EXPAND xpt::Common::nonNLS»
		}
«IF editorGen.application = null-»
		«IF standaloneDomainModel(self)»setCharset(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(modelResource));«ENDIF»
		setCharset(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(diagramResource));
«ENDIF-»
		return diagramResource;
	}
«ENDIF»
«ENDAROUND»

«AROUND createInitialModelMethod FOR gmfgen::GenDiagram»
«IF not needDefaultName(self)»
«targetDef.proceed()-»
«ELSE»
	«EXPAND xpt::Common::generatedMemberComment('Create a new instance of domain element associated with canvas.
<!-- begin-user-doc -->
<!-- end-user-doc -->')»
	private static «EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» createInitialModel(java.lang.String diagramName) {
		«EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» diagram = «EXPAND MetaModel::NewInstance FOR domainDiagramElement»;
		diagram.setName(diagramName);
		return diagram;
	}
«ENDIF»
«ENDAROUND»

«DEFINE loadDefaultImportsCall FOR gmfgen::GenDiagram-» 
	«IF needDefaultImports(self)-»
		loadDefaultImports(model);
	«ENDIF-»	
«ENDDEFINE»

«DEFINE loadDefaultImports FOR gmfgen::GenDiagram» 
	«IF needDefaultImports(self)-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static void loadDefaultImports(«EXPAND MetaModel::QualifiedClassName FOR domainDiagramElement» model) {
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet = model.eResource().getResourceSet();
		org.eclipse.uml2.uml.Model umlLibrary = (org.eclipse.uml2.uml.Model) resourceSet.getResource(«-»
			org.eclipse.emf.common.util.URI.createURI(org.eclipse.uml2.uml.resource.UMLResource.UML_PRIMITIVE_TYPES_LIBRARY_URI), true).getContents().get(0);
		model.createElementImport(umlLibrary.getOwnedType("Boolean"));
		model.createElementImport(umlLibrary.getOwnedType("String"));
		model.createElementImport(umlLibrary.getOwnedType("UnlimitedNatural"));
		model.createElementImport(umlLibrary.getOwnedType("Integer"));
	}
	«ENDIF-»	
«ENDDEFINE»