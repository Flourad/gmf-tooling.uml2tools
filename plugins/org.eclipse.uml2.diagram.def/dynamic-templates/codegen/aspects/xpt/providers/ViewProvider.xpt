/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Tatiana Fesenko (Borland) - initial API and implementation
 *    Michael Golubev (Borland) - GMF 2.0 migration
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0"»

«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE caseSubstitutableByVisualID(gmfgen::GenCommonBase nextSubstitutableChild) FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
«EXPAND caseSubstitutableDomainElementIsNull»
int suggestedID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR getDiagram()»(containerView, domainElement);
if (visualID != suggestedID &&
	«LET ((gmfgenext::SubstitutableByAttributes)nextSubstitutableChild.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS group-»
		«FOREACH group.getSubstitutableByNodes() AS nextSubstitution-»
		«EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextSubstitution» != suggestedID &&
		«ENDFOREACH-»		
	true) {
			return null;
		}
	break;
	}
	«ENDLET-»
«ENDDEFINE»

«DEFINE caseSubstitutableDomainElementIsNull FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE caseSubstitutableDomainElementIsNull FOR gmfgen::GenNode-»
if (domainElement == null){
	return null;
}
«ENDDEFINE»

«AROUND getNodeViewClass FOR gmfgen::GenDiagram-»
«LET getElements(this).typeSelect(gmfgen::GenNode).select(n| null != n.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS substitutableChildren-»
«EXPAND xpt::Common::generatedMemberComment»
protected Class getNodeViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter,
		org.eclipse.gmf.runtime.notation.View containerView, String semanticHint) {
	if (containerView == null) {
		return null;
	}
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = getSemanticElementType(semanticAdapter);
	org.eclipse.emf.ecore.EObject domainElement = getSemanticElement(semanticAdapter);
	int visualID;
	if (semanticHint == null) {
		// Semantic hint is not specified. Can be a result of call from CanonicalEditPolicy.
		// In this situation there should be NO elementType, visualID will be determined
		// by VisualIDRegistry.getNodeVisualID() for domainElement.
		if (elementType != null || domainElement == null) {
			return null;
		}
		visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(containerView, domainElement);
	} else {
		visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(semanticHint);
		if (elementType != null) {
			// Semantic hint is specified together with element type.
			// Both parameters should describe exactly the same diagram element.
			// In addition we check that visualID returned by VisualIDRegistry.getNodeVisualID() for
			// domainElement (if specified) is the same as in element type.
			if (!«getElementTypesQualifiedClassName()».isKnownElementType(elementType)
					|| (!(elementType instanceof org.eclipse.gmf.runtime.emf.type.core.IHintedType))) {
				return null; // foreign element type
			}
			String elementTypeHint = ((org.eclipse.gmf.runtime.emf.type.core.IHintedType) elementType).getSemanticHint();
			if (!semanticHint.equals(elementTypeHint)) {
				return null; // if semantic hint is specified it should be the same as in element type
			}
			if (domainElement != null && «EXPAND aspects::xpt::editor::VisualIDRegistry::checkNodeVisualIDMethodCall»(containerView, domainElement, visualID)) {
				return null; // visual id for node EClass should match visual id from element type, or at least be substitutable for it
			}
		} else {
			// Element type is not specified. Domain element should be present.
			// This method is called with EObjectAdapter as parameter from:
			//   - ViewService.createNode(View container, EObject eObject, String type, PreferencesHint preferencesHint) 
			//   - generated ViewFactory.decorateView() for parent element
	«IF getElements(this).select(e | e.elementType != null).size() > 0-»
			if (!«getEditPartQualifiedClassName()».MODEL_ID.equals(«getVisualIDRegistryQualifiedClassName()».getModelID(containerView))) {
				return null; // foreign diagram
			}
			switch (visualID) {
			«FOREACH substitutableChildren AS nextSubstitutableChild-»
				«EXPAND caseSubstitutableByVisualID(nextSubstitutableChild) FOR nextSubstitutableChild-»
			«ENDFOREACH-»
			«EXPAND xpt::Common::caseVisualID FOREACH getElements(this).select(e | e.elementType != null && !substitutableChildren.contains(e)).typeSelect(gmfgen::GenNode)-»
				if (domainElement == null || visualID != «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(containerView, domainElement)) {
					return null; // visual id in semantic hint should match visual id for domain element
				}
				break;
			«EXPAND xpt::providers::ViewProvider::checkChildrenVisualIDs FOREACH getElements(this).select(e | e.elementType != null)-»
			default:
				return null;
			}
	«ELSE-»
			return null;
	«ENDIF-»
		}
	}
	return getNodeViewClass(containerView, visualID);
}

«EXPAND xpt::Common::generatedMemberComment»
protected Class getNodeViewClass(org.eclipse.gmf.runtime.notation.View containerView, int visualID) {
	if (containerView == null || !«EXPAND xpt::editor::VisualIDRegistry::canCreateNodeMethodCall»(containerView, visualID)) {
		return null;
	}
	switch (visualID) {
	«EXPAND xpt::providers::ViewProvider::caseContainerVisualID FOREACH getAllChildContainers()-»
	«EXPAND xpt::providers::ViewProvider::caseEntry FOREACH links.labels-»
	}
	return null;
}
«ENDLET»
«ENDAROUND»

«AROUND additions FOR gmfgen::GenDiagram»
«REM»
	ALL BELOW THIS LINE IS SAFE TO BE DELETED AFTER GMF RC4
«ENDREM»«-»
«ENDAROUND»

«AROUND getDiagramViewClass FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected Class getDiagramViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter, String diagramKind) {
	org.eclipse.emf.ecore.EObject semanticElement = getSemanticElement(semanticAdapter);
	if («EXPAND xpt::editor::VisualIDRegistry::modelID».equals(diagramKind)
			&& «EXPAND xpt::editor::VisualIDRegistry::getDiagramVisualIDMethodCall»(semanticElement) != -1) {
		return «getNotationViewFactoryQualifiedClassName()».class;
	}
	return null;
}
«ENDAROUND»

«AROUND caseEntry FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::caseVisualID» return «getNotationViewFactoryQualifiedClassName()».class;
«ENDAROUND»

«AROUND getEdgeViewClass FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected Class getEdgeViewClass(org.eclipse.core.runtime.IAdaptable semanticAdapter,
		org.eclipse.gmf.runtime.notation.View containerView, String semanticHint) {
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = getSemanticElementType(semanticAdapter);
	if (!«getElementTypesQualifiedClassName()».isKnownElementType(elementType)
			|| (!(elementType instanceof org.eclipse.gmf.runtime.emf.type.core.IHintedType))) {
		return null; // foreign element type
	}
	String elementTypeHint = ((org.eclipse.gmf.runtime.emf.type.core.IHintedType) elementType).getSemanticHint();
	if (elementTypeHint == null) {
		return null; // our hint is visual id and must be specified
	}
	if (semanticHint != null && !semanticHint.equals(elementTypeHint)) {
		return null; // if semantic hint is specified it should be the same as in element type
	}
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(elementTypeHint);
	org.eclipse.emf.ecore.EObject domainElement = getSemanticElement(semanticAdapter);
	if (domainElement != null && visualID != «EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall»(domainElement)) {
		return null; // visual id for link EClass should match visual id from element type
	}
	return getEdgeViewClass(visualID);
}

«EXPAND xpt::Common::generatedMemberComment»
protected Class getEdgeViewClass(int visualID) {
	switch (visualID) {
	«EXPAND xpt::providers::ViewProvider::caseEntry FOREACH links-»
	}
	return null;
}
«ENDAROUND»

«AROUND getSemanticElementType FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.emf.type.core.IElementType getSemanticElementType(
		org.eclipse.core.runtime.IAdaptable semanticAdapter) {
	if (semanticAdapter == null) {
		return null;
	}
	return (org.eclipse.gmf.runtime.emf.type.core.IElementType) semanticAdapter.getAdapter(
			org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
}
«ENDAROUND»

