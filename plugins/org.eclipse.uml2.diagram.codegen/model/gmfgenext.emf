@namespace(uri="http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0", prefix="uml2.gmfgenext")
package gmfgenext;

import "platform:/plugin/org.eclipse.gmf.codegen/models/gmfgen.ecore";
import "platform:/plugin/org.eclipse.gmf.map/models/gmfmap.ecore";
import "platform:/plugin/org.eclipse.gmf.graphdef/models/gmfgraph.ecore";
import "platform:/plugin/org.eclipse.gmf.tooldef/models/tooldef.ecore";
import "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore";

class AuxSecondaryDiagramNodeAttribute extends gmfgen.Attributes {
	@genmodel(documentation="When installed into the top-level node, it should always share the domain element with diagram canvas")
	attr boolean substituteWithCanvasElement; 
}

class CustomLocatorAttributes extends gmfgen.Attributes {
	@genmodel(documentation="Applicable for gmfgen::GenChildSideAffixedNode only. Allows to customize IBorderItemLocator implementation")
	attr String customLocatorFQN; 
}

class DetailsLevelAttributes extends gmfgen.Attributes {
	@genmodel(documentation="Applicable for gmfgen::GenCompartment only. If set, children of this compartment will be filtered according to actual diagram details level.")
	attr boolean filteringCompartment;
	@genmodel(documentation="If set, parser for this element should have details-level specific ParserOptions.")
	attr boolean detailsAwareParser; 
} 

class SubstitutableByAttributes extends gmfgen.Attributes {
	@genmodel(documentation="Allows to have different notation for same semantic element. Diagram updater should choose some default notation, but should treat any of the substitutable nodes as correct representation for given semantic element")
	attr int[*] substitutableByIDs;
	attr boolean requiresAll;
	op gmfgen.GenCommonBase[*] getSubstitutableByNodes();
}

abstract class AbstractDynamicCanonicalContainer extends gmfgen.Attributes {
	attr int[*] alwaysCanonicalIDs;
	attr boolean initiallyCanonical = false;
	
	op gmfgen.GenCommonBase[*] getAlwaysCanonicalChildren();
}

class DynamicCanonicalCompartment extends AbstractDynamicCanonicalContainer {
}

class InteractionDiagramAttributes extends gmfgen.Attributes {
	@genmodel(documentation="Applicable for gmfgen::GenNode. This node is responcible for distribution of its children's figures between different layers.")
	attr boolean multiLayered = true;
}

class RotatedLabelAttributes extends gmfgen.Attributes {
}

class StereotypeSupportAttribute extends gmfgen.Attributes {
	attr StereotypeSupportRole role;
}

enum StereotypeSupportRole {
	CONTAINER;
	NAME_LABEL; 
	STEREOTYPE_LABEL;
} 

@namespace(uri="http://www.eclipse.org/modeling/mdt/uml2tools/gmf/mapping", prefix="u2tmap")
package u2tmap {
	class MappingExt extends mappings.Mapping {
		ref NewMenuDefinitions newMenuDefs;	
	}
	
	class NewMenuDefinitions {
		attr String defID;
		
		val NewMenuContext[*] contexts; 
		ref NewMenuContext[*] importedContexts;
		ref NewMenuDefinitions[*] importedDefinitions;
	}
	
	class NewMenuContext {
		ref ecore.EClass metaclass;
		attr boolean includeSubClasses = true;
		ordered val AbstractNewMenuEntry[*]#context entries;
		ref AbstractNewMenuEntry[*] importedEntries;
	}
	
	abstract class AbstractNewMenuEntry {
		readonly ref NewMenuContext#entries context;
	} 
	
	class NewMenuEntry extends AbstractNewMenuEntry {
		ref ecore.EReference containment;
		attr String displayName;

		ordered ref ecore.EClass[1..*] children;
	}
	
	class NewMenuAllChoices extends NewMenuEntry {
		unique ref ecore.EClass[*] exclusions;
	}
	
	class Separator extends AbstractNewMenuEntry {
	}
	
	@genmodel(documentation="Actually not used. See scr https://bugs.eclipse.org/bugs/show_bug.cgi?id=261062 for details")
	abstract class Fake {
		ref gmfgraph.Canvas explicitGraphdefReference;
		ref tooldef.ToolRegistry explicitTooldefReference; 
	}
}


