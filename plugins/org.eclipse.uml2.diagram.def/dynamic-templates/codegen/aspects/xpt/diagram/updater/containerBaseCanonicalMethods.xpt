/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0"»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»

«AROUND isOrphaned FOR gmfgen::GenContainerBase-»
	«LET getSemanticChildren(this).select(n| null != n.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS substitutableChildren-»
		«IF substitutableChildren.isEmpty()-»
			«targetDef.proceed()-»
		«ELSE»
	«EXPAND xpt::Common::generatedMemberComment»
protected boolean isOrphaned(java.util.Collection semanticChildren, final org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND xpt::diagram::updater::containerBaseCanonicalMethods::checkShortcutProperty-»
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(view);
	int suggestedID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR getDiagram()»((org.eclipse.gmf.runtime.notation.View) getHost().getModel(), view.getElement());
	switch (visualID) {
	«IF getSemanticChildren(this).size() > substitutableChildren.size() -»
	«FOREACH getSemanticChildren(this) AS nextChild-»
		«IF !substitutableChildren.contains(nextChild) -»
			«EXPAND xpt::Common::caseVisualID FOR nextChild»		
		«ENDIF-»
	«ENDFOREACH-»
		if (!semanticChildren.contains(view.getElement())) {
			return true;
		}
		«IF hasConformableSemanticChildren(this)-»
			«REM»the default GMF check above should find conformable semantic chilren EXCEPT substitutable ones«ENDREM»«-»
			«REM»see base template«ENDREM»«-»
			«LET getSemanticChildren(this).reject(n| null != n.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()).collect(node | node.modelFacet.metaClass) AS childMetaClasses -»
			«IF !childMetaClasses.forAll(mc | childMetaClasses.select(mc2 | mc == mc2).size() == 1)-»
				«EXPAND xpt::diagram::updater::containerBaseCanonicalMethods::updateNotationModelElement-»
			«ENDIF-»
			«ENDLET-»
		«ENDIF-»
		break;
	«ENDIF-»
	«FOREACH substitutableChildren AS nextSubstitutableChild-»
			«EXPAND xpt::Common::caseVisualID FOR nextSubstitutableChild»
			if (!semanticChildren.contains(view.getElement())){
				return true;
			}
			return (visualID != suggestedID) && «-»
			«LET ((gmfgenext::SubstitutableByAttributes)nextSubstitutableChild.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS group-»
				«FOREACH group.getSubstitutableByNodes() AS nextSubstitution SEPARATOR " && "»
					(suggestedID != «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextSubstitution»)
				«ENDFOREACH-»
				;		
			«ENDLET-»
	«ENDFOREACH-»
	}
	return false;	
}
		«ENDIF-»
	«ENDLET-»
«ENDAROUND»
