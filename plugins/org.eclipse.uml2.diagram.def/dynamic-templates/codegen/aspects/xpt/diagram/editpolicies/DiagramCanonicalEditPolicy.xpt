/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION aspects::xpt::diagram::updater::DescriptorsGenApi»
«EXTENSION u2t::async::NonCanonicalDiagram»
	
«AROUND refreshSemantic FOR gmfgen::GenDiagram-»
«IF not supportsNonCanonicalMode(self)-»
	«targetDef.proceed()-»
«ELSE-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshSemantic() {
		java.util.List createdViews = new java.util.LinkedList();
		if (myCanonicalHelper.shouldSyncNodes(getNotationView())){		
			createdViews.addAll(refreshSemanticChildren());
		}
		java.util.List createdConnectionViews = new java.util.LinkedList();
		if (myCanonicalHelper.shouldSyncLinks(getNotationView())){
			createdConnectionViews.addAll(refreshSemanticConnections());
			«IF not links->isEmpty()-»
			createdConnectionViews.addAll(refreshConnections());
			«ENDIF-»
		}
		
		if (createdViews.size() > 1) {
			// perform a layout of the container
			org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
			executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
		}
	
		createdViews.addAll(createdConnectionViews);
		makeViewsImmutable(createdViews);
	}
«ENDIF-»
«ENDAROUND»

«AROUND xpt::diagram::editpolicies::DiagramCanonicalEditPolicy::additions FOR gmfgen::GenDiagram»
	«EXPAND DomainToNotationClass»
	
	«IF supportsNonCanonicalMode(self)-»
	«EXPAND getNotationView»
	
	«EXPAND myCanonicalHelper»
	«ENDIF-» 
«ENDAROUND»

«DEFINE DomainToNotationClass FOR gmfgen::GenDiagram»
    «EXPAND xpt::Common::generatedMemberComment»
	private static class Domain2Notation {
	    «EXPAND xpt::Common::generatedMemberComment»
		private final java.util.HashMap myMap = new java.util.HashMap();
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public boolean containsDomainElement(org.eclipse.emf.ecore.EObject domainElement){
			return myMap.containsKey(domainElement);
		}

	    «EXPAND xpt::Common::generatedMemberComment»
		public boolean containsKey(org.eclipse.emf.ecore.EObject domainElement){
			return containsDomainElement(domainElement);
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public void put(org.eclipse.emf.ecore.EObject domainElement, org.eclipse.gmf.runtime.notation.View view){
			Object viewOrList = myMap.get(domainElement);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				myMap.remove(domainElement);
				java.util.List<org.eclipse.gmf.runtime.notation.View> list = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
				list.add((org.eclipse.gmf.runtime.notation.View)viewOrList);
				myMap.put(domainElement, list);
				list.add(view);
			} else if (viewOrList instanceof java.util.List){
				((java.util.List)viewOrList).add(view);
			} else {
				myMap.put(domainElement, view);
			}
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gmf.runtime.notation.View get(org.eclipse.emf.ecore.EObject domainEObject){
			Object viewOrList = myMap.get(domainEObject);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				return (org.eclipse.gmf.runtime.notation.View)viewOrList;
			}
			if (viewOrList instanceof java.util.List){
				// preferring not-shortcut to shortcut -- important for cases when links arr to/from 
				// the element that is additionally shortcutted to the same diagram
				for (Object next : (java.util.List)viewOrList){
					org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
					if (nextView.getEAnnotation("Shortcut") == null) { «EXPAND xpt::Common::nonNLS»
						return nextView;
					}
				}
				return (org.eclipse.gmf.runtime.notation.View)((java.util.List)viewOrList).get(0);
			}
			return null;
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gmf.runtime.notation.View getHinted(org.eclipse.emf.ecore.EObject domainEObject, String hint){
			if (hint == null){
				return get(domainEObject);
			}
			Object viewOrList = myMap.get(domainEObject);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				//no choice, will return what we have
				return (org.eclipse.gmf.runtime.notation.View)viewOrList;
			}
			if (viewOrList instanceof java.util.List){ 
				for (Object next : (java.util.List)viewOrList){
					org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
					if (hint.equals(nextView.getType())){
						return nextView;
					}
				}
				//hint not found -- return what we have
				return (org.eclipse.gmf.runtime.notation.View)((java.util.List)viewOrList).get(0);
			}
			return null;
		}
	
	}

«ENDDEFINE»

«DEFINE getNotationView FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View getNotationView() {
		return (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	}
«ENDDEFINE»

«DEFINE myCanonicalHelper FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	private final org.eclipse.uml2.diagram.common.async.ICanonicalHelper myCanonicalHelper = org.eclipse.uml2.diagram.common.async.ICanonicalHelper.IMPLEMENTATION;
«ENDDEFINE»	