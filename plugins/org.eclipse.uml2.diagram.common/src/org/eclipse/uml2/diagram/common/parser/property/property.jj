options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
}

PARSER_BEGIN(PropertyParser)

/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */
package org.eclipse.uml2.diagram.common.parser.property;

import java.io.*;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.uml2.diagram.parser.*;
import org.eclipse.uml2.diagram.parser.lookup.LookupSuite;
import org.eclipse.uml2.diagram.parser.lookup.LookupResolver;
import org.eclipse.uml2.uml.*;

public class PropertyParser extends ExternalParserBase {
	private Property mySubject;
	
    private static class TypeLookupCallback implements LookupResolver.Callback {
    	private final Property myProperty;

		public TypeLookupCallback(Property property){
			myProperty = property;
    	}
    	
    	public void lookupResolved(NamedElement resolution) {
    		if (resolution instanceof Type){
    			myProperty.setType((Type)resolution);
    		}
    	}
    }

    public PropertyParser(){
    	this(new StringReader(""));
    }
    
    public PropertyParser(LookupSuite lookup){
    	this();
    	setLookupSuite(lookup);
    }

	public EClass getSubjectClass(){
		return UMLPackage.eINSTANCE.getProperty();
	}
	
	public void parse(EObject target, String text) throws ExternalParserException {
		checkContext();
		ReInit(new StringReader(text));
		mySubject = (Property)target;
		Declaration();
		mySubject = null;
	}
	
	protected static int parseInt(Token t) throws ParseException {
		if (t.kind != PropertyParserConstants.INTEGER_LITERAL){
			throw new IllegalStateException("Token: " + t + ", image: " + t.image);
		}
		try {
			return Integer.parseInt(t.image); //XXX: "0005", "99999999999999999999999"
		} catch (NumberFormatException e){
			throw new ParseException("Not supported integer value:" + t.image);
		}
	}
	
}

PARSER_END(PropertyParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
}

/* SEPARATORS */
TOKEN :
{
	< SLASH: "/" >
|	< COLON: ":" >
|	< EQUALS: "=" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< LCURLY: "{" >
|	< RCURLY: "}" >
|	< COMMA: "," >
}

/* SPECIAL_MEANING */
TOKEN :
{
	< PLUS: "+" >
|	< MINUS: "-" >
|	< NUMBER_SIGN: "#" >
|	< TILDE: "~" >
|	< DOT: "." >
|	< STAR: "*" >
}

/* MODIFIERS */
TOKEN :
{
	< READ_ONLY: "readOnly" >
|	< UNION: "union" >
|	< SUBSETS: "subsets" >
|	< REDEFINES: "redefines" >
|	< ORDERED: "ordered" >
|	< UNORDERED: "unordered" > 
|	< UNIQUE: "unique" >
|	< NON_UNIQUE: "nonunique" >
}
	
/* LITERALS */
TOKEN: 
{
	< INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
}
  
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

void Declaration() :
{}
{
	(
		[ Visibility() ]
		[ IsDerived() ]
		PropertyName()
		[ PropertyType() ]
		[ Multiplicity() ]
		[ DefaultValue() ]
		[ PropertyModifiers() ]
	) <EOF>
}

void PropertyName() :
{
	String name;
}
{
	name = NameWithSpaces() 
	{
		mySubject.setName(name);
	}
}

void Visibility() :
{ 
	VisibilityKind kind;
}
{
	(
		<PLUS> { kind = VisibilityKind.PUBLIC_LITERAL; }
	|
		<MINUS> { kind = VisibilityKind.PRIVATE_LITERAL; }
	|
		<NUMBER_SIGN> { kind = VisibilityKind.PROTECTED_LITERAL; }
	|
		<TILDE> { kind = VisibilityKind.PACKAGE_LITERAL; }
	)
	{
		mySubject.setVisibility(kind);
	}
}

void Multiplicity() :
{}
{
	MultiplicityRange() 
	/* XXX: Parse conflict in case of empty DefaultValue, consider "a:int[5]{unique}"  
	[ MultiplicityDesignator() ] 
	*/
}

/* XXX: Parse conflict in case of empty default value
void MultiplicityDesignator() :
{ }
{
	<LCURLY> 
	(
		( MultiplicityUnique() [ MultiplicityOrdered() ] ) 
		|
		( MultiplicityOrdered() [ MultiplicityUnique() ] ) 
	) 
	<RCURLY>
}

void MultiplicityUnique() :
{}
{
		<UNIQUE> { mySubject.setIsUnique(true); }
	|
		<NON_UNIQUE> { mySubject.setIsUnique(false); }	
}

void MultiplicityOrdered() :
{}
{
		<ORDERED> { mySubject.setIsOrdered(true); }
	|
		<UNORDERED> { mySubject.setIsOrdered(false); }
}

*/

/* XXX: ValueSpecification -- how to parse */
void MultiplicityRange() :
{
	Token tLower = null;
	Token tUpper;
}
{
	<LBRACKET>
	(
		[ LOOKAHEAD(2) tLower = <INTEGER_LITERAL> <DOT> <DOT> { mySubject.setLower(parseInt(tLower)); } ] 
		(
			tUpper = <STAR> 
			{ 
				if (tLower == null){
					mySubject.setLower(0);
				}
				mySubject.setUpper(LiteralUnlimitedNatural.UNLIMITED); 
			}
		| 
			tUpper = <INTEGER_LITERAL> 
			{ 
				if (tLower == null){
					mySubject.setLower(parseInt(tUpper));
				}
				mySubject.setUpper(parseInt(tUpper)); 
			}
		)
	)
	<RBRACKET>
}

void IsDerived() :
{}
{
	<SLASH> { mySubject.setIsDerived(true); }
}

void PropertyType() :
{
	String type;
}
{
	<COLON> type = NameWithSpaces() { applyLookup(Type.class, type, new TypeLookupCallback(mySubject)); }
}

String NameWithSpaces() :
{
	StringBuffer result = new StringBuffer();
	Token t;
}
{
	(
		t = <IDENTIFIER> { result.append(t.image); } 
		( t = <IDENTIFIER> { result.append(' '); result.append(t.image); } ) *
	)
	{
		return result.toString();
	}
}

void DefaultValue() :
{
	Token t;	
}
{
	(
		<EQUALS> ( t = <IDENTIFIER> | t = <INTEGER_LITERAL> { /* XXX: Should be Expression */ } )
	)
	{
		mySubject.setDefault(t.image);
	}
}

void SimpleTokenPropertyModifier() :
{}
{
	(
		<READ_ONLY> { mySubject.setIsReadOnly(true); }
	|
		<UNION> { mySubject.setIsDerivedUnion(true); }
	|
		<ORDERED> { mySubject.setIsOrdered(true); }
	|
		<UNORDERED> { mySubject.setIsOrdered(false); }
	|
		<UNIQUE> { mySubject.setIsUnique(true); }
	|
		<NON_UNIQUE> { mySubject.setIsUnique(false); }
	)
}

void ReferencingPropertyModifier() :
{
	String name;
}
{
	(
		<SUBSETS> name = NameWithSpaces() 
		{ 
			Property subsets = lookup(Property.class, name); 
			if (subsets != null) {
				mySubject.getSubsettedProperties().add(subsets);
			}
		}
	|
		<REDEFINES> name = NameWithSpaces() 
		{ 
			RedefinableElement redefines = lookup(RedefinableElement.class, name); 
			if (redefines != null) {
				mySubject.getRedefinedElements().add(redefines);
			}
		}
	)
}

void PropertyModifiers() :
{}
{
	<LCURLY> 
	( SimpleTokenPropertyModifier() | ReferencingPropertyModifier() )
	( <COMMA> ( SimpleTokenPropertyModifier() | ReferencingPropertyModifier() ) )*
	<RCURLY>
}
