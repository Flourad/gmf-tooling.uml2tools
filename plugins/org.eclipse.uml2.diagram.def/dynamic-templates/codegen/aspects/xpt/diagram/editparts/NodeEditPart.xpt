/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Michael Golubev (Borland) - uml2tools specific version (see NodeEditPart_changes_only.xpt)
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0"»

«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»

«AROUND NodeEditPart FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPartsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «editPartClassName» extends «EXPAND xpt::diagram::editparts::NodeEditPart::extendsList» {

	«EXPAND xpt::diagram::editparts::Common::visualIDConstant FOR this-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure contentPane;

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure primaryShape;

	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void createDefaultEditPolicies() {
		«EXPAND xpt::diagram::editparts::NodeEditPart::editPoliciesMethodBody-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
		«EXPAND xpt::diagram::editparts::NodeEditPart::createLayoutEditPolicyMethodBody-»
	}

	«EXPAND xpt::diagram::editparts::NodeEditPart::createNodeShape(this) FOR viewmap-»

	«IF hasFixedChildren()-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		«FOREACH getInnerFixedLabels() AS label-»
			«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND xpt::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(
				getPrimaryShape().«childViewmap.getterName»());
			return true;
		}
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			«EXPAND createSideAffixedNodeLocator FOR child-»
			getBorderedFigure().getBorderItemContainer().add(
				((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
			return true;
		}
		«ENDFOREACH-»
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		«REM»ignore labels assuming that they never may be removed«ENDREM»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			pane.remove(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			getBorderedFigure().getBorderItemContainer().remove(
				((«child.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}
		«ENDFOREACH-»
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
		«REM»it is unclear what we should return for labels here«ENDREM»
		«FOREACH getPinnedCompartments() AS compartment-»
			«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (editPart instanceof «compartment.getEditPartQualifiedClassName()») {
			return getPrimaryShape().«childViewmap.getterName»();
		}	
			«ENDLET-»
		«ENDFOREACH-»
		«FOREACH getSideAffixedChildren() AS child-»
		if (editPart instanceof «child.getEditPartQualifiedClassName()») {
			return getBorderedFigure().getBorderItemContainer();
		}
		«ENDFOREACH-»
		return super.getContentPaneFor(editPart);
	}

	«ENDIF-»

	«IF getExternalLabels().size() > 0-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer,
			org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
		if (
			«FOREACH getExternalLabels() AS label SEPARATOR ' || '-»
				borderItemEditPart instanceof «label.getEditPartQualifiedClassName()»
			«ENDFOREACH-»
				) {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator =
				new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(),
					org.eclipse.draw2d.PositionConstants.SOUTH);
			locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-20, -20));
			borderItemContainer.add(borderItemEditPart.getFigure(), locator);
		} else {
			super.addBorderItem(borderItemContainer, borderItemEditPart);
		}
	}
	«ENDIF-»

«EXPAND xpt::diagram::editparts::NodeEditPart::createNodePlateMethod-»

	«LET getResizeConstraints(viewmap) AS rc-»
	«IF null != primaryDragEditPolicyQualifiedClassName || null != rc-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
		«IF null != primaryDragEditPolicyQualifiedClassName-»
		return new «primaryDragEditPolicyQualifiedClassName»();
		«ELSE-»
		org.eclipse.gef.EditPolicy result = super.getPrimaryDragEditPolicy();
		if (result instanceof org.eclipse.gef.editpolicies.ResizableEditPolicy) {
			org.eclipse.gef.editpolicies.ResizableEditPolicy ep =
				(org.eclipse.gef.editpolicies.ResizableEditPolicy) result;
			ep.setResizeDirections(
				«IF rc.resizeHandleNames.size() > 0-»
					«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '-»
				org.eclipse.draw2d.PositionConstants.«name»
					«ENDFOREACH-»
				«ELSE-»
				org.eclipse.draw2d.PositionConstants.NONE
				«ENDIF-»
			);
		}
		return result;
		«ENDIF-»
	}
	«ENDIF-»
	«ENDLET-»

	«EXPAND xpt::Common::generatedMemberComment(
		"Creates figure for this edit part.\n" +
		"\n" +
		"Body of this method does not depend on settings in generation model\n" +
		"so you may safely remove <i>generated</i> tag and modify it.\n"
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems()»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	«EXPAND xpt::Common::generatedMemberComment(
		"Default implementation treats passed figure as content pane.\n" +
		"Respects layout one may have set for generated figure.\n" +
		"@param nodeShape instance of generated figure class"
	)»
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
«IF !childNodes.isEmpty() || !compartments.isEmpty() || !labels.without(labels.typeSelect(GenExternalNodeLabel)).isEmpty()-»
		if (nodeShape.getLayoutManager() == null) {
		«IF getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
		nodeShape.setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {

			public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
				Object result = constraints.get(figure);
				if (result == null) {
					result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
				}
				return result;
			}
		});
		«ELSE-»
			org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =
				new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
			layout.setSpacing(getMapMode().DPtoLP(5));
			nodeShape.setLayoutManager(layout);
		«ENDIF-»
		}
«ENDIF-»
		return nodeShape; // use nodeShape itself as contentPane
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	«IF !labels.isEmpty()-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(
			«EXPAND xpt::editor::VisualIDRegistry::visualID FOR (GenLabel) labels.toList().first()»));
	}
	«ENDIF-»

	«EXPAND xpt::diagram::editparts::NodeEditPart::handleNotificationEvent FOR this-»

	«EXPAND xpt::diagram::editparts::NodeEditPart::additions-»
	
	«EXPAND xpt::diagram::editparts::NodeEditPart::innerClassDeclaration FOR viewmap-»
}
«ENDAROUND»

«DEFINE createSideAffixedNodeLocator FOR gmfgen::GenChildSideAffixedNode-»
	«IF null != viewmap.attributes.typeSelect(gmfgenext::CustomLocatorAttributes).first()-»
		org.eclipse.gmf.runtime.diagram.ui.figures.IBorderItemLocator locator =
			new «((gmfgenext::CustomLocatorAttributes)viewmap.attributes.typeSelect(gmfgenext::CustomLocatorAttributes).first()).customLocatorFQN»(getMainFigure());
	«ELSE-»
		org.eclipse.gmf.runtime.diagram.ui.figures.IBorderItemLocator locator =
			new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(
						getMainFigure(), org.eclipse.draw2d.PositionConstants.«preferredSideName»);
	«ENDIF-»
«ENDDEFINE»

«AROUND editPoliciesMethodBody FOR gmfgen::GenNode-»
		«EXPAND xpt::diagram::editparts::NodeEditPart::installCreationRolePolicy»
		super.createDefaultEditPolicies();
		«EXPAND xpt::diagram::editparts::NodeEditPart::installPrimaryDragEditPolicy-»
		«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
		«IF needsGraphicalNodeEditPolicy()-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE,
			new «getGraphicalNodeEditPolicyQualifiedClassName()»());
		«ENDIF-»
		«IF !childNodes.isEmpty()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE,
			new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
		«ENDIF-»
		«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
		installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
«ENDAROUND»
