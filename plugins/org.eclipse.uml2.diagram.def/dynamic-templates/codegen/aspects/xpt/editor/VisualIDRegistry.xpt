/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 *       1. Diagram Header support
 *       2. [210678] - Allow multi-view representation for single domain element
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0"»

«EXTENSION aspects::xpt::diagram::updater::DiagramHeader»
«EXTENSION xpt::editor::Utils»

«AROUND returnVisualID FOR gmfgen::GenCommonBase-»
	«LET ((gmfgenext::SubstitutableByAttributes)viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS group -»
	«IF isDiagramHeader(this) -»
		// Diagram header is already processed above
	«ELSEIF null != group && group.requiresAll-»
		// there is a group of nodes for single semantic element
		// the group for this element consists of 
		// «EXPAND xpt::editor::VisualIDRegistry::visualID FOR this»
		«FOREACH group.getSubstitutableByNodes() AS nextPart-»
		// «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextPart»
		«ENDFOREACH-»
		// diagram updater is expected to return one node descriptor (and thus one instance of that semantic element) per node in group
		// we need to give other parts a chance to create their views
		if («EXPAND xpt::editor::VisualIDRegistry::checkSemanticElement» && !hasViewChild(containerView, domainElement, «EXPAND xpt::editor::VisualIDRegistry::visualID»)) {
			return «EXPAND xpt::editor::VisualIDRegistry::visualID»;
		}
	«ELSE -»
		«targetDef.proceed()-»
	«ENDIF-»
	«ENDLET»
«ENDAROUND»

«AROUND caseDomainContainerVisualID FOR gmfgen::GenContainerBase-»
	«LET selectDiagramHeader(getContainedSemanticNodes(this)) AS childHeader -»
	«IF null != childHeader -»
		«EXPAND xpt::Common::caseVisualID»
			«EXPAND checkHeader FOR childHeader-»
			«EXPAND xpt::editor::VisualIDRegistry::returnVisualID FOREACH getContainedSemanticNodes(this)-»
			break;
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF-»
	«ENDLET-»
«ENDAROUND»

«DEFINE checkHeader FOR gmfgen::GenNode-»
	«IF isDiagramHeader(this) -»
		// We want to additionally show the Canvas Semantical Element in the auxiliary 
		// «getEditPartQualifiedClassName()» (that serves as a pure visual container for children). 
		// To do this, we modified CanonicalEditPolicy to add the Canvas semantic Element into the children 
		// list. The only remaining part is to return correct VID for this special case.
	
		if (containerView instanceof org.eclipse.gmf.runtime.notation.Diagram «-»
			&& domainElement != null && domainElement.equals(containerView.getElement())) {
				return «EXPAND xpt::editor::VisualIDRegistry::visualID»;
		}		
	«ENDIF-»
«ENDDEFINE»

«AROUND additions FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	protected static boolean hasViewChild(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement, int visualId) {
		if (domainElement == null){
			return false;
		}
		for (Object next : containerView.getChildren()){
			org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
			if (domainElement.equals(nextView.getElement()) && getType(visualId).equals(nextView.getType())){
				return true;
			}
		}
		return false;
	}
«ENDAROUND»