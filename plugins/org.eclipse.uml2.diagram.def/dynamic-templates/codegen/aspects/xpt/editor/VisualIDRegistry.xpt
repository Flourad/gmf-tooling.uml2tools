/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 *       1. Diagram Header support
 *       2. [210678] - Allow multi-view representation for single domain element
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/uml2/diagram/gmfgenext/DiagramFigure/1.0"»

«EXTENSION aspects::xpt::diagram::updater::DiagramHeader»
«EXTENSION xpt::editor::Utils»

«AROUND additions FOR gmfgen::GenDiagram»

	«EXPAND hasViewChild»
	
	«EXPAND getChildDescriptorVisualID»
	
«ENDAROUND»

«AROUND returnVisualID FOR gmfgen::GenCommonBase-»
	«LET ((gmfgenext::SubstitutableByAttributes)viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS group -»
	«IF isDiagramHeader(this) -»
		// Diagram header is already processed above
	«ELSEIF null != group && group.requiresAll-»
		// there is a group of nodes for single semantic element
		// the group for this element consists of 
		// «EXPAND xpt::editor::VisualIDRegistry::visualID FOR this»
		«FOREACH group.getSubstitutableByNodes() AS nextPart-»
		// «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextPart»
		«ENDFOREACH-»
		// diagram updater is expected to return one node descriptor (and thus one instance of that semantic element) per node in group
		// we need to give other parts a chance to create their views
		if («EXPAND xpt::editor::VisualIDRegistry::checkSemanticElement» && !hasViewChild(containerView, domainElement, «EXPAND xpt::editor::VisualIDRegistry::visualID»)) {
			return «EXPAND xpt::editor::VisualIDRegistry::visualID»;
		}
	«ELSE -»
		«targetDef.proceed()-»
	«ENDIF-»
	«ENDLET-»
«ENDAROUND»

«AROUND caseDomainContainerVisualID FOR gmfgen::GenContainerBase-»
	«LET selectDiagramHeader(getContainedSemanticNodes(this)) AS childHeader -»
	«IF null != childHeader -»
		«EXPAND xpt::Common::caseVisualID»
			«EXPAND checkHeader FOR childHeader-»
			«EXPAND xpt::editor::VisualIDRegistry::returnVisualID FOREACH getContainedSemanticNodes(this)-»
			«REM»
			For multipart nodes, we have added additional check hasViewChild into each group item case, in order to allow other group items to create their views.
			When all views are created, we still need to return arbitrary choosen part's id for given container + semantic pair, to avoid removing the whole group from diagram by updater
			«ENDREM» «-»
			«FOREACH getContainedSemanticNodes(this) AS nextChild -»
					«REM»It would be better to add one "escape" block per group, but its not clear how to do it «ENDREM»«-»
					«LET ((gmfgenext::SubstitutableByAttributes)nextChild.viewmap.attributes.typeSelect(gmfgenext::SubstitutableByAttributes).first()) AS nextGroup -»
					«IF null != nextGroup && nextGroup.requiresAll -»
							// "escape" for multi-views part : «EXPAND xpt::editor::VisualIDRegistry::visualID» -- prevents from removing the whole group from diagram
							if («EXPAND xpt::editor::VisualIDRegistry::checkSemanticElement FOR nextChild») {
								return «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextChild»;
							}
					«ENDIF-»
					«ENDLET-»		
			«ENDFOREACH-»
			break;
	«ELSE-»
		«targetDef.proceed()-»
	«ENDIF-»
	«ENDLET-»
«ENDAROUND»

«DEFINE checkHeader FOR gmfgen::GenNode-»
	«IF isDiagramHeader(this) -»
		// We want to additionally show the Canvas Semantical Element in the auxiliary 
		// «getEditPartQualifiedClassName()» (that serves as a pure visual container for children). 
		// To do this, we modified CanonicalEditPolicy to add the Canvas semantic Element into the children 
		// list. The only remaining part is to return correct VID for this special case.
	
		if (containerView instanceof org.eclipse.gmf.runtime.notation.Diagram «-»
			&& domainElement != null && domainElement.equals(containerView.getElement())) {
				return «EXPAND xpt::editor::VisualIDRegistry::visualID»;
		}		
	«ENDIF-»
«ENDDEFINE»

«DEFINE hasViewChild FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	protected static boolean hasViewChild(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement, int visualId) {
		if (containerView == null){
			return false;
		}
		if (domainElement == null){
			return false;
		}
		for (Object next : containerView.getChildren()){
			org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
			if (domainElement.equals(nextView.getElement()) && getType(visualId).equals(nextView.getType())){
				return true;
			}
		}
		return false;
	}
«ENDDEFINE»

«DEFINE getChildDescriptorVisualID FOR gmfgen::GenDiagram-»
«LET getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName() AS descriptorFQN-»
	«EXPAND xpt::Common::generatedMemberComment»
public static int «EXPAND getChildDescriptorVisualIDMethodName»(«descriptorFQN» container, org.eclipse.emf.ecore.EObject domainElement) {
	«REM»the line below is generated to workaround compilation error in class diagram, where hasViewChild() method is called «ENDREM»«-»
	«IF this.getAllNodes().collect(n|n.viewmap.attributes).flatten().typeSelect(gmfgenext::SubstitutableByAttributes).select(attr|attr.requiresAll).size() > 0-»
	final View containerView = null;
	«ENDIF-»
	if (domainElement == null) {
		«EXPAND xpt::editor::VisualIDRegistry::unrecognizedVID-»
	}
	switch (container.getVisualID()) {
		«EXPAND caseDomainDescriptorContainer FOREACH getAllContainers()-»
	}
	«EXPAND xpt::editor::VisualIDRegistry::unrecognizedVID-»
}
«ENDLET»
«ENDDEFINE»

«DEFINE caseDomainDescriptorContainer FOR gmfgen::GenCompartment-»
«REM»Do nothing -- compartments are processed inside their nodes«ENDREM»«-»
«ENDDEFINE»

«DEFINE caseDomainDescriptorContainer FOR gmfgen::GenContainerBase-»
	«IF getContainedSemanticNodes(this).size() > 0 || this.compartments.size() > 0-»
«EXPAND xpt::Common::caseVisualID»
	«FOREACH getContainedSemanticNodes(this) AS nextDirectChild-»
		«IF !isDiagramHeader(nextDirectChild)-»
			«EXPAND xpt::editor::VisualIDRegistry::returnVisualID FOR nextDirectChild-»
		«ENDIF-»
	«ENDFOREACH-»
	«FOREACH this.compartments AS nextCompartment-»
		«EXPAND xpt::editor::VisualIDRegistry::returnVisualID FOREACH getContainedSemanticNodes(nextCompartment)-»
	«ENDFOREACH-»
	break;
	«ENDIF-»
«ENDDEFINE»

«DEFINE getChildDescriptorVisualIDMethodName FOR gmfgen::GenDiagram»getChildDescriptorVisualID«ENDDEFINE»

