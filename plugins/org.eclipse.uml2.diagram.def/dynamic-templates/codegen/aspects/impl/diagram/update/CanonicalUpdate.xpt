/*
 * Copyright (c) 2007-2010 Borland Software Corporation, and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 *    Elena Shaverdova (SwiftTeams) - #317680 - migration to GMF.2.3 	
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»
«IMPORT 'http://www.eclipse.org/modeling/mdt/uml2tools/gmf/GenModel'»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::editor::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION aspects::xpt::diagram::updater::DescriptorsGenApi»

«AROUND refreshConnectionsAuxMethods FOR gmfgen::GenDiagram-»
	«targetDef.proceed()»
	«EXPAND collectLinksOutgoingFromShortcut-»
«ENDAROUND»

«AROUND refreshConnectionsBody FOR gmfgen::GenDiagram-»
«EXPAND CodeStyle::G2('java.util.Map', 'org.eclipse.emf.ecore.EObject', 'org.eclipse.gmf.runtime.notation.View')» domain2NotationMap = new «EXPAND CodeStyle::G2('java.util.HashMap', 'org.eclipse.emf.ecore.EObject', 'org.eclipse.gmf.runtime.notation.View')»();
	«EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
	java.util.Collection existingLinks = new java.util.LinkedList(getDiagram().getEdges());
	for (java.util.Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge nextDiagramLink = (org.eclipse.gmf.runtime.notation.Edge) linksIterator.next();
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
		if (diagramLinkVisualID == -1«EXPAND _compareLinkVisualID FOREACH links->select(gl | gl.modelFacet.oclIsUndefined())») {
			if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
				linksIterator.remove();
			}
			continue;
		}
		org.eclipse.emf.ecore.EObject diagramLinkObject = nextDiagramLink.getElement();
		org.eclipse.gmf.runtime.notation.View sourceView = nextDiagramLink.getSource();
		org.eclipse.gmf.runtime.notation.View targetView = nextDiagramLink.getTarget();
		if (sourceView != null && targetView != null) {
			org.eclipse.emf.ecore.EObject diagramLinkSrc = sourceView.getElement();
			org.eclipse.emf.ecore.EObject diagramLinkDst = targetView.getElement();
			if (diagramLinkSrc != null && diagramLinkDst != null) {
				«EXPAND CodeStyle::iterate('nextLinkDescriptor', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName(), 'linkDescriptorsIterator', 'linkDescriptors.iterator()')-»
					if (diagramLinkObject == nextLinkDescriptor.getModelElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
						//Add the edge and it's domain element to the domain2Notation-Map.
						«REM»
						This is necessary when the source of the link is a shortcut. Otherwise the map will already contain an entry for this link. 
						«ENDREM»
						if (!domain2NotationMap.containsKey(nextDiagramLink.getElement())) {
							domain2NotationMap.put(nextDiagramLink.getElement(), nextDiagramLink);
						}
						linksIterator.remove();
						linkDescriptorsIterator.remove();
						break;
					}
				}
			}
		}
	}
	deleteViews(existingLinks.iterator());
	return createConnections(linkDescriptors, domain2NotationMap);
«ENDAROUND»

«AROUND createConnectionsMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND CodeStyle::G('java.util.Collection', 'org.eclipse.core.runtime.IAdaptable')»  createConnections(«EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» linkDescriptors, «EXPAND CodeStyle::G2('java.util.Map', 'org.eclipse.emf.ecore.EObject', 'org.eclipse.gmf.runtime.notation.View')» domain2NotationMap) {
	«EXPAND CodeStyle::newGenericInstance('adapters', 'java.util.LinkedList', 'org.eclipse.core.runtime.IAdaptable')»();
	«EXPAND CodeStyle::iterate('nextLinkDescriptor', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName(), 'linkDescriptors')-»
		org.eclipse.gef.EditPart sourceEditPart = getEditPart(nextLinkDescriptor.getSource(), domain2NotationMap);
		org.eclipse.gef.EditPart targetEditPart = getEditPart(nextLinkDescriptor.getDestination(), domain2NotationMap);
		if (sourceEditPart == null || targetEditPart == null) {
			continue;
		}
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('nextLinkDescriptor.getVisualID()')», org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(descriptor);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sourceEditPart);
		sourceEditPart.getCommand(ccr);
		ccr.setTargetEditPart(targetEditPart);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = targetEditPart.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable viewAdapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			if (viewAdapter != null) {
				adapters.add(viewAdapter);
				//add newly generated view to domain2notation map
				org.eclipse.emf.ecore.EObject domainElement = (org.eclipse.emf.ecore.EObject)nextLinkDescriptor.getSemanticAdapter().getAdapter(org.eclipse.emf.ecore.EObject.class);
				org.eclipse.gmf.runtime.notation.View viewElement = (org.eclipse.gmf.runtime.notation.View)viewAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
				domain2NotationMap.put(domainElement, viewElement);
			}
		}
	}
	return adapters;
}
«ENDAROUND»

«DEFINE _compareLinkVisualID FOR gmfgen::GenLink» || diagramLinkVisualID == «EXPAND xpt::editor::VisualIDRegistry::visualID»«ENDDEFINE»

«AROUND _caseSemanticElement FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
	if (!domain2NotationMap.containsKey(view.getElement())) {
«REM»
	Processing each domain element only once. Prevents us from 
	having duplicated links if a shortcut to one of the "main"
	diagram elements present on diagram.
«ENDREM»«-»
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
«REM»
	The difference for this around is here - Domain2Notation is to collect ALL views for given semantic element
«ENDREM»«-»
	domain2NotationMap.put(view.getElement(), view);
	break;	
}
«ENDAROUND»

«DEFINE collectLinksOutgoingFromShortcut FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment» 
	private java.util.Collection<«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()»> collectLinksOutgoingFromShortcut(org.eclipse.gmf.runtime.notation.View view, «EXPAND CodeStyle::G2('java.util.Map', 'org.eclipse.emf.ecore.EObject', 'org.eclipse.gmf.runtime.notation.View')» domain2NotationMap) {
		org.eclipse.gef.EditPart ep = (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
		if (false == ep instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart){
			return Collections.emptyList();
		}
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart = (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)ep;
		org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest request = new org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest();
		//we are not using the result command -- each editpart from the tree 
		//is required to push data into the request
		editPart.getCommand(request);
		
		java.util.Set<«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()»> linksToFromShortcuts = new java.util.HashSet<«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()»>();
		for (org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest.Descriptor next : request.getDescriptions()){
			java.util.List<org.eclipse.uml2.diagram.common.genapi.IUpdaterLinkDescriptor> containedLinks = next.getContainedLinks();
			for (org.eclipse.uml2.diagram.common.genapi.IUpdaterLinkDescriptor ld : containedLinks) {
				if (ld instanceof «editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») {
					linksToFromShortcuts.add((«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») ld);
				}
			}
			java.util.List<org.eclipse.uml2.diagram.common.genapi.IUpdaterLinkDescriptor> outgoingLinks = next.getOutgoingLinks();
			for (org.eclipse.uml2.diagram.common.genapi.IUpdaterLinkDescriptor ld : outgoingLinks) {
				if (ld instanceof «editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») {
					linksToFromShortcuts.add((«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») ld);
				}
			}
			
			if (next.getSemanticElement() != null){
				domain2NotationMap.put(next.getSemanticElement(), next.getProvider().getNotationView());
			}
			
		}
		
		return linksToFromShortcuts;
	}

«ENDDEFINE»

«AROUND collectAllLinksMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» collectAllLinks(org.eclipse.gmf.runtime.notation.View view, «EXPAND CodeStyle::G2('java.util.Map', 'org.eclipse.emf.ecore.EObject', 'org.eclipse.gmf.runtime.notation.View')» domain2NotationMap) {
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(view))) {
		return «EXPAND CodeStyle::emptyList»;
	}
	if (view != null && view.getEAnnotation("Shortcut") != null) {
			return collectLinksOutgoingFromShortcut(view, domain2NotationMap);
	}
	«EXPAND CodeStyle::newGenericInstance('result', 'java.util.LinkedList', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())»();
	switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view)) {
		«EXPAND _caseSemanticElement FOREACH getAllSemanticElements(self)-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	return result;
}
«ENDAROUND»

«AROUND getSemanticChildrenList FOR gmfgen::GenContainerBase-»
	«REM»
	The only difference with base template so far is marked below
	«ENDREM»«-»
«EXPAND xpt::Common::generatedMemberComment»
«EXPAND CodeStyle::SuppressWarnings('"rawtypes"')»
protected java.util.List getSemanticChildrenList() {
	«IF hasSemanticChildren(self) /*REVISIT: is there real need for this check - Generator seems to consult needsCanonicalEP, which in turns ensures there are semantic children?*/-»
	org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	«EXPAND CodeStyle::newGenericInstance('result', 'java.util.LinkedList', 'org.eclipse.emf.ecore.EObject')»();
	«EXPAND CodeStyle::G('java.util.List', getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName())» childDescriptors = «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»(viewObject);
	«REM»
		The only difference with base template so far is here: 
		We are using interface IUpdaterNodeDescriptor instead of predefined instance from our plugin 
		It is done in order to process descriptors from other diagram plugins 
		that were dynamically added	by AbstractUpdateDescriptionEditPolicy from
	«ENDREM»«-»
	«EXPAND CodeStyle::iterate('d', 'org.eclipse.uml2.diagram.common.genapi.IUpdaterNodeDescriptor', 'childDescriptors')-»
		result.add(d.getModelElement());
	}
	return result;
	«ELSE-»
	return java.util.Collections.EMPTY_LIST;
	«ENDIF-»
}
«ENDAROUND»

«DEFINE _caseSemanticElement FOR gmfgen::GenChildLabelNode»«ENDDEFINE»
«DEFINE _caseSemanticElement FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
	if (!domain2NotationMap.containsKey(view.getElement())) {
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
	if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { «EXPAND xpt::Common::nonNLS»
		domain2NotationMap.put(view.getElement(), view);
	}	
	break;	
}
«ENDDEFINE»
	
«AROUND refreshSemanticChildren(String createdViewsVar, gmfgen::GenDiagramUpdater diagramUpdater) FOR gmfgen::GenContainerBase-»
«REM» All changes are supplied with remarks starting with "U2T:" «ENDREM»	«-»
«LET hasConformableSemanticChildren(self) AS childrenShareSameMetaclass-»
		«REM» U2T: [315454] Added empty list when corresponding nathod is not provided. «ENDREM»«-»
		«EXPAND CodeStyle::G('java.util.List', diagramUpdater.getNodeDescriptorQualifiedClassName())» childDescriptors = «IF hasSemanticChildren(self)-»
		«EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»((org.eclipse.gmf.runtime.notation.View) getHost().getModel())«ELSE»java.util.Collections.emptyList()«ENDIF»;
		«REM»[315454] End of change. «ENDREM»«-»
		«EXPAND CodeStyle::newGenericInstance('orphaned', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		// we care to check only views we recognize as ours
		«EXPAND CodeStyle::newGenericInstance('knownViewChildren', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		«EXPAND CodeStyle::iterate('v', 'org.eclipse.gmf.runtime.notation.View', 'getViewChildren()')-»
			if (isMyDiagramElement(v)) {
				knownViewChildren.add(v);
			}
			«EXPAND impl::diagram::update::CanonicalUpdate::_checkOrphanedShortcuts('orphaned', 'v')-»
		}
		// alternative to #cleanCanonicalSemanticChildren(getViewChildren(), semanticChildren)
		«IF childrenShareSameMetaclass-»
		«EXPAND CodeStyle::newGenericInstance2('potentialViews', 'java.util.HashMap', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		«ENDIF-»
		//
		// iteration happens over list of desired semantic elements, trying to find best matching View, while original CEP
		// iterates views, potentially losing view (size/bounds) information - i.e. if there are few views to reference same EObject, only last one 
		// to answer isOrphaned == true will be used for the domain element representation, see #cleanCanonicalSemanticChildren()
		«EXPAND CodeStyle::iterate('next', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'descriptorsIterator', 'childDescriptors.iterator()')-»
			String hint = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('next.getVisualID()')»;
			«EXPAND CodeStyle::newGenericInstance('perfectMatch', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»(); // both semanticElement and hint match that of NodeDescriptor
			«IF childrenShareSameMetaclass-»
			«EXPAND CodeStyle::newGenericInstance('potentialMatch', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»(); // semanticElement matches, hint does not
			«ENDIF-»
			«EXPAND CodeStyle::iterate('childView', 'org.eclipse.gmf.runtime.notation.View', 'getViewChildren()')-»
				org.eclipse.emf.ecore.EObject semanticElement = childView.getElement();
				if (next.getModelElement().equals(semanticElement)) {
					//if (hint.equals(childView.getType())) {
					«REM» U2T: Check for substitutability instead of straightforward hint.equals(childView.getType()«ENDREM»«-»
					if («getDiagram().getVisualIDRegistryQualifiedClassName()».checkNodeVisualID((org.eclipse.gmf.runtime.notation.View)(getHost().getModel()), semanticElement, next.getVisualID())) {
					«REM» End of change. «ENDREM»«-»
						perfectMatch.add(childView);
						// actually, can stop iteration over view children here, but
						// may want to use not the first view but last one as a 'real' match (the way original CEP does
						// with its trick with viewToSemanticMap inside #cleanCanonicalSemanticChildren
					«IF childrenShareSameMetaclass-»
					} else {
						potentialMatch.add(childView);
					«ENDIF-»
					}
					«REM» do not break, loop through all potential view children in hope there would be precise match«ENDREM»«-»
				}
			}
			if (perfectMatch.size() > 0) {
				descriptorsIterator.remove(); // precise match found no need to create anything for the NodeDescriptor
				// use only one view (first or last?), keep rest as orphaned for further consideration
				«REM» U2T: Changed getFirst() to getLast() for backward compatibility. «ENDREM»«-»
				knownViewChildren.remove(perfectMatch.getLast());
				«REM» End of change. «ENDREM»«-»
			«IF childrenShareSameMetaclass-»
			} else if (potentialMatch.size() > 0) {
				«REM»
					Bug 224206 -  Support switching figure of EditPart with domain element property change: need to create new view for the node descriptor and copy old attributes.
					To address this, old implementation tries to change VID of the first View known to reference same semantic element
					but it is possible some potentialMatch would be perfectMatch for later NodeDescriptor
				«ENDREM»«-»
				potentialViews.put(next, potentialMatch); 
			«ENDIF-»
			}
		}
		// those left in knownViewChildren are subject to removal - they are our diagram elements we didn't find match to,
		// or those we have potential matches to, and thus need to be recreated, preserving size/location information.
		orphaned.addAll(knownViewChildren);
		//
		«IF childrenShareSameMetaclass-»
		org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand boundsCommand = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(host().getEditingDomain(), org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.SetLocationCommand_Label_Resize);
		«ENDIF-»
		«EXPAND CodeStyle::newGenericInstance('viewDescriptors', 'java.util.ArrayList', 'org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor')»(childDescriptors.size());		
		«EXPAND CodeStyle::iterate('next', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'childDescriptors')-»
			String hint = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('next.getVisualID()')»;
			org.eclipse.core.runtime.IAdaptable elementAdapter = new CanonicalElementAdapter(next.getModelElement(), hint);
			org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor(elementAdapter, org.eclipse.gmf.runtime.notation.Node.class, hint, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, host().getDiagramPreferencesHint());
			viewDescriptors.add(descriptor);
		«IF childrenShareSameMetaclass /*code to preserve bounds makes sense only when there are children of same metaclass that may have distinctive attribute changed */-»
			«REM»XXX: IN FACT, we should generate this code IFF child nodes are shapes - no sense to expect bounds in comparments. ASK Vano«ENDREM»
			«EXPAND CodeStyle::G('java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')» possibleMatches = «EXPAND CodeStyle::castTyped('java.util.LinkedList')»potentialViews.get(next);
			if (possibleMatches != null) {
				// from potential matches, leave those that were not eventually used for some other NodeDescriptor (i.e. those left as orphaned)
				possibleMatches.retainAll(knownViewChildren);
			}
			if (possibleMatches != null && !possibleMatches.isEmpty()) {
				org.eclipse.gmf.runtime.notation.View originalView = «EXPAND CodeStyle::castTyped('org.eclipse.gmf.runtime.notation.View')»possibleMatches.getFirst();
				knownViewChildren.remove(originalView); // remove not to copy properties of the same view again and again
				// add command to copy properties
				if (originalView instanceof org.eclipse.gmf.runtime.notation.Node) {
					if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Bounds) {
						org.eclipse.gmf.runtime.notation.Bounds b = (org.eclipse.gmf.runtime.notation.Bounds) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Rectangle(b.getX(), b.getY(), b.getWidth(), b.getHeight())));
					} else if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Location) {
						org.eclipse.gmf.runtime.notation.Location l = (org.eclipse.gmf.runtime.notation.Location) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Point(l.getX(), l.getY())));
					} else if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Size) {
						org.eclipse.gmf.runtime.notation.Size s = (org.eclipse.gmf.runtime.notation.Size) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Dimension(s.getWidth(), s.getHeight())));
					}
					«REM»
					   Note, we don't support Ratio update (as it was done in #populateViewProperties). 
					   First, SetCompartmentRatioCommand is internal; second reason - I don't believe we generate CEP to update compartments
					   
					   FIXME However, makes sense to extract this piece for potential extensions.
					«ENDREM»«-»
				}
			}
		«ENDIF-»
		}

		boolean changed = deleteViews(orphaned.iterator());
		//
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest request = getCreateViewRequest(viewDescriptors);
		org.eclipse.gef.commands.Command cmd = getCreateViewCommand(request);
		if (cmd != null && cmd.canExecute() ) {
			org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(host().getNotationView())).execute();
			executeCommand(cmd);
			«IF childrenShareSameMetaclass»if (boundsCommand.canExecute()) {
				executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(boundsCommand.reduce()));
			}
			«ENDIF-»
			«EXPAND CodeStyle::SuppressWarnings('"unchecked"')»
			«EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.runtime.IAdaptable')» nl = («EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.runtime.IAdaptable')») request.getNewObject();
			«createdViewsVar».addAll(nl);
		}
		if (changed || «createdViewsVar».size() > 0) {
			postProcessRefreshSemantic(createdViews);
		}
«ENDLET-»
«ENDAROUND»

«AROUND getFeaturesToSynchronizeMethod FOR gmfgen::GenContainerBase-»
«IF getSemanticChildrenContainmentFeatures(self)->size() = 1-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EStructuralFeature getFeatureToSynchronize() {
		return «EXPAND MetaModel::MetaFeature FOR getSemanticChildrenContainmentFeatures(self)->any(true)»;
	}
«ELSEIF getSemanticChildrenContainmentFeatures(self)->size() > 1-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.util.Set getFeaturesToSynchronize() {
		if (myFeaturesToSynchronize == null) {
			myFeaturesToSynchronize = new «EXPAND CodeStyle::G('java.util.HashSet', 'org.eclipse.emf.ecore.EStructuralFeature')»();
			«EXPAND impl::diagram::update::CanonicalUpdate::_addContainmentFeature FOREACH getSemanticChildrenContainmentFeatures(self)-»
		}
		return myFeaturesToSynchronize;
	}
«ENDIF-»
«ENDAROUND»


«AROUND isOrphanedMethod FOR gmfgen::GenContainerBase-»
«IF self.getDiagram().getAllNodes()->size() > getSemanticChildren(self)->size()-»
«EXPAND xpt::Common::generatedMemberComment»
protected boolean isOrphaned(«EXPAND CodeStyle::G('java.util.Collection', 'org.eclipse.emf.ecore.EObject')» semanticChildren, final org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND impl::diagram::update::CanonicalUpdate::_checkShortcutProperty-»
	return isMyDiagramElement(view) ? !semanticChildren.contains(view.getElement()) : isDefinitelyNotMyDiagramElement(view) ;
}

«EXPAND isDefinitelyNotMyDiagramElement»
«ELSE-»
«targetDef.proceed()»
«ENDIF-»
«ENDAROUND»

«DEFINE isDefinitelyNotMyDiagramElement FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean isDefinitelyNotMyDiagramElement(org.eclipse.gmf.runtime.notation.View view){
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(view);
	switch (visualID) {
	«EXPAND caseBlockForNotAllowedNodes»
	}	
	return false;
}
«ENDDEFINE»

«DEFINE caseBlockForNotAllowedNodes FOR gmfgen::GenContainerBase-»
	«REM»We want to explicitly mark as orphaned all generated nodes that are not allowed to be here -- see #208889«ENDREM»«-»
	«IF self.getDiagram().getAllNodes()->size() > getSemanticChildren(self)->size()-»
	«FOREACH self.getDiagram().getAllNodes()->asSequence() AS nextRejectedNode-»
		«IF not getSemanticChildren(self)->includes(nextRejectedNode)-»
			«EXPAND xpt::Common::caseVisualID FOR nextRejectedNode»
		«ENDIF-»
	«ENDFOREACH-»
			return true; 
	«ENDIF-»
	«REM»end of fix for #208889«ENDREM»«-»
«ENDDEFINE»

«AROUND _checkOrphanedShortcuts(String orphanedCollectionVar, String viewVar) FOR gmfgen::GenDiagram-»
«IF containsShortcutsTo->notEmpty()-»
	// FIXME remove this AROUND from CanonicalUpdate.xpt-template, when bug in GMF Tooling (327389) is fixed
	if («viewVar».getEAnnotation("Shortcut") != null && «editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()».isShortcutOrphaned(«viewVar»)) {«EXPAND xpt::Common::nonNLS»
		«orphanedCollectionVar».add(«viewVar»);
	} else {
		knownViewChildren.remove(«viewVar»);
	}
«ENDIF-»
«ENDAROUND»
